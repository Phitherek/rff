var search_data = {"index":{"searchIndex":["rff","argumenterror","audiohandler","outputreader","processingfailure","processor","videohandler","audio_input_bitrate2()","audio_input_channelmode()","audio_input_format()","audio_input_format_type()","audio_input_frequency()","audio_input_metadata()","audio_output_bitrate2()","audio_output_channelmode()","audio_output_format()","audio_output_format_type()","audio_output_frequency()","audio_output_metadata()","audio_stream_mapping()","command()","command_exit_status()","common_input_metadata()","common_output_metadata()","conversion_type()","custom_args()","custom_args()","custom_args()","detected_output_type()","ffmpeg_build_line()","ffmpeg_version_line()","fire()","fire_all()","fire_all()","fire_sequential()","fire_sequential()","format_processing_percentage()","format_processing_percentage()","format_processing_percentage()","full_output_path()","get_raw_buffer()","gets()","input()","input()","input()","input_bitrate()","input_duration()","input_start()","input_type()","join_reading_thread()","kill()","killall()","killall()","mp3_processor()","mp4_processor()","new()","new()","new()","new()","new()","ogg_processor()","ogv_processor()","output_name()","output_name()","output_name()","output_path()","output_path()","output_path()","output_type()","parser_status()","processing_percentage()","processing_percentage()","processing_percentage()","processing_status()","quality()","quality()","raw_command_output()","status()","to_s()","video_input_additional()","video_input_colorspace()","video_input_format()","video_input_metadata()","video_input_resolution()","video_output_additional()","video_output_colorspace()","video_output_format()","video_output_metadata()","video_output_resolution()","video_stream_mapping()","wav_processor()","webm_processor()","readme"],"longSearchIndex":["rff","rff::argumenterror","rff::audiohandler","rff::outputreader","rff::processingfailure","rff::processor","rff::videohandler","rff::processor#audio_input_bitrate2()","rff::processor#audio_input_channelmode()","rff::processor#audio_input_format()","rff::processor#audio_input_format_type()","rff::processor#audio_input_frequency()","rff::processor#audio_input_metadata()","rff::processor#audio_output_bitrate2()","rff::processor#audio_output_channelmode()","rff::processor#audio_output_format()","rff::processor#audio_output_format_type()","rff::processor#audio_output_frequency()","rff::processor#audio_output_metadata()","rff::processor#audio_stream_mapping()","rff::processor#command()","rff::processor#command_exit_status()","rff::processor#common_input_metadata()","rff::processor#common_output_metadata()","rff::processor#conversion_type()","rff::audiohandler#custom_args()","rff::processor#custom_args()","rff::videohandler#custom_args()","rff::processor#detected_output_type()","rff::processor#ffmpeg_build_line()","rff::processor#ffmpeg_version_line()","rff::processor#fire()","rff::audiohandler#fire_all()","rff::videohandler#fire_all()","rff::audiohandler#fire_sequential()","rff::videohandler#fire_sequential()","rff::audiohandler#format_processing_percentage()","rff::processor#format_processing_percentage()","rff::videohandler#format_processing_percentage()","rff::processor#full_output_path()","rff::outputreader#get_raw_buffer()","rff::outputreader#gets()","rff::audiohandler#input()","rff::processor#input()","rff::videohandler#input()","rff::processor#input_bitrate()","rff::processor#input_duration()","rff::processor#input_start()","rff::processor#input_type()","rff::outputreader#join_reading_thread()","rff::processor#kill()","rff::audiohandler#killall()","rff::videohandler#killall()","rff::audiohandler#mp3_processor()","rff::videohandler#mp4_processor()","rff::audiohandler::new()","rff::outputreader::new()","rff::processingfailure::new()","rff::processor::new()","rff::videohandler::new()","rff::audiohandler#ogg_processor()","rff::videohandler#ogv_processor()","rff::audiohandler#output_name()","rff::processor#output_name()","rff::videohandler#output_name()","rff::audiohandler#output_path()","rff::processor#output_path()","rff::videohandler#output_path()","rff::processor#output_type()","rff::processor#parser_status()","rff::audiohandler#processing_percentage()","rff::processor#processing_percentage()","rff::videohandler#processing_percentage()","rff::processor#processing_status()","rff::processor#quality()","rff::videohandler#quality()","rff::processor#raw_command_output()","rff::processor#status()","rff::processingfailure#to_s()","rff::processor#video_input_additional()","rff::processor#video_input_colorspace()","rff::processor#video_input_format()","rff::processor#video_input_metadata()","rff::processor#video_input_resolution()","rff::processor#video_output_additional()","rff::processor#video_output_colorspace()","rff::processor#video_output_format()","rff::processor#video_output_metadata()","rff::processor#video_output_resolution()","rff::processor#video_stream_mapping()","rff::audiohandler#wav_processor()","rff::videohandler#webm_processor()",""],"info":[["RFF","","RFF.html","","<p>The main module for <em>rff</em> -  a Ruby gem for simple audio and video\nconversion for HTML5 using FFmpeg\n<p>Author … &mdash; "],["RFF::ArgumentError","","RFF/ArgumentError.html","","<p>This exception is thrown on insufficient arguments to the method\n"],["RFF::AudioHandler","","RFF/AudioHandler.html","","<p>This class provides an “All audio to HTML5” conversion functionality. It\ntakes every compatible …\n"],["RFF::OutputReader","","RFF/OutputReader.html","","<p>A class that reads the given IO stream and provides advanced reading\nfunctions for it. It reads the given …\n"],["RFF::ProcessingFailure","","RFF/ProcessingFailure.html","","<p>This exception is thrown on FFmpeg processing error\n"],["RFF::Processor","","RFF/Processor.html","","<p>The main processing class of the <em>rff</em> gem. It spawns FFmpeg\nconversion process and parses its output, …\n"],["RFF::VideoHandler","","RFF/VideoHandler.html","","<p>This class provides an “All video to HTML5” conversion functionality. It\ntakes every compatible …\n"],["audio_input_bitrate2","RFF::Processor","RFF/Processor.html#method-i-audio_input_bitrate2","()","<p>This method returns bitrate of audio input (from input information line)\n"],["audio_input_channelmode","RFF::Processor","RFF/Processor.html#method-i-audio_input_channelmode","()","<p>This method returns channel mode (eg. mono, stereo) of audio input\n"],["audio_input_format","RFF::Processor","RFF/Processor.html#method-i-audio_input_format","()","<p>This method returns format of audio input\n"],["audio_input_format_type","RFF::Processor","RFF/Processor.html#method-i-audio_input_format_type","()","<p>This method returns type of format of audio input\n"],["audio_input_frequency","RFF::Processor","RFF/Processor.html#method-i-audio_input_frequency","()","<p>This method returns frequency of audio input\n"],["audio_input_metadata","RFF::Processor","RFF/Processor.html#method-i-audio_input_metadata","()","<p>This method returns metadata for audio input stream as a hash with keys\nbeing symbols representing each …\n"],["audio_output_bitrate2","RFF::Processor","RFF/Processor.html#method-i-audio_output_bitrate2","()","<p>This method returns bitrate of audio output (from output information line)\n"],["audio_output_channelmode","RFF::Processor","RFF/Processor.html#method-i-audio_output_channelmode","()","<p>This method returns channel mode (eg. mono, stereo) of audio output\n"],["audio_output_format","RFF::Processor","RFF/Processor.html#method-i-audio_output_format","()","<p>This method returns format of audio output\n"],["audio_output_format_type","RFF::Processor","RFF/Processor.html#method-i-audio_output_format_type","()","<p>This method returns type of format of audio output\n"],["audio_output_frequency","RFF::Processor","RFF/Processor.html#method-i-audio_output_frequency","()","<p>This method returns frequency of audio output\n"],["audio_output_metadata","RFF::Processor","RFF/Processor.html#method-i-audio_output_metadata","()","<p>This method returns metadata for audio output stream as a hash with keys\nbeing symbols representing each …\n"],["audio_stream_mapping","RFF::Processor","RFF/Processor.html#method-i-audio_stream_mapping","()","<p>This method returns audio stream mapping information (input_format -&gt;\noutput_format)\n"],["command","RFF::Processor","RFF/Processor.html#method-i-command","()","<p>This method returns the FFmpeg command used for conversion\n"],["command_exit_status","RFF::Processor","RFF/Processor.html#method-i-command_exit_status","()","<p>This method returns the exit status of the FFmpeg command\n"],["common_input_metadata","RFF::Processor","RFF/Processor.html#method-i-common_input_metadata","()","<p>This method returns common metadata for input streams as a hash with keys\nbeing symbols representing …\n"],["common_output_metadata","RFF::Processor","RFF/Processor.html#method-i-common_output_metadata","()","<p>This method returns common metadata for output streams as a hash with keys\nbeing symbols representing …\n"],["conversion_type","RFF::Processor","RFF/Processor.html#method-i-conversion_type","()","<p>This method returns conversion type (:audio or :video)\n"],["custom_args","RFF::AudioHandler","RFF/AudioHandler.html#method-i-custom_args","()","<p>This method returns custom arguments passed to FFmpeg\n"],["custom_args","RFF::Processor","RFF/Processor.html#method-i-custom_args","()","<p>This method returns custom arguments passed to FFmpeg\n"],["custom_args","RFF::VideoHandler","RFF/VideoHandler.html#method-i-custom_args","()","<p>This method returns custom arguments passed to FFmpeg\n"],["detected_output_type","RFF::Processor","RFF/Processor.html#method-i-detected_output_type","()","<p>This method returns output type read by FFmpeg\n"],["ffmpeg_build_line","RFF::Processor","RFF/Processor.html#method-i-ffmpeg_build_line","()","<p>This method returns FFmpeg build line\n"],["ffmpeg_version_line","RFF::Processor","RFF/Processor.html#method-i-ffmpeg_version_line","()","<p>This method returns FFmpeg version line\n"],["fire","RFF::Processor","RFF/Processor.html#method-i-fire","()","<p>This method runs the FFmpeg conversion process in a separate thread. First\nit initializes processing …\n"],["fire_all","RFF::AudioHandler","RFF/AudioHandler.html#method-i-fire_all","()","<p>This method fires all the Processor instances (conversion processes) in a\nseparate thread at once. Then …\n"],["fire_all","RFF::VideoHandler","RFF/VideoHandler.html#method-i-fire_all","()","<p>This method fires all the Processor instances (conversion processes) in a\nseparate thread at once. Then …\n"],["fire_sequential","RFF::AudioHandler","RFF/AudioHandler.html#method-i-fire_sequential","()","<p>This method fires all the Processor instances (conversion processes) in a\nseparate thread sequentially …\n"],["fire_sequential","RFF::VideoHandler","RFF/VideoHandler.html#method-i-fire_sequential","()","<p>This method fires all the Processor instances (conversion processes) in a\nseparate thread sequentially …\n"],["format_processing_percentage","RFF::AudioHandler","RFF/AudioHandler.html#method-i-format_processing_percentage","()","<p>This method returns percentage of process completion formatted for output\n"],["format_processing_percentage","RFF::Processor","RFF/Processor.html#method-i-format_processing_percentage","()","<p>This method returns percentage of process completion formatted for output\n"],["format_processing_percentage","RFF::VideoHandler","RFF/VideoHandler.html#method-i-format_processing_percentage","()","<p>This method returns percentage of process completion formatted for output\n"],["full_output_path","RFF::Processor","RFF/Processor.html#method-i-full_output_path","()","<p>This method returns full path to the output file\n"],["get_raw_buffer","RFF::OutputReader","RFF/OutputReader.html#method-i-get_raw_buffer","()","<p>This method outputs the internal buffer without any additional processing\n"],["gets","RFF::OutputReader","RFF/OutputReader.html#method-i-gets","(seps=[\"\\n\"])","<p>This method provides an implementation of IO gets method for streams\ncontaining lines with different …\n"],["input","RFF::AudioHandler","RFF/AudioHandler.html#method-i-input","()","<p>This method returns full input path\n"],["input","RFF::Processor","RFF/Processor.html#method-i-input","()","<p>This method returns full input path\n"],["input","RFF::VideoHandler","RFF/VideoHandler.html#method-i-input","()","<p>This method returns full input path\n"],["input_bitrate","RFF::Processor","RFF/Processor.html#method-i-input_bitrate","()","<p>This method returns input bitrate (from the duration line)\n"],["input_duration","RFF::Processor","RFF/Processor.html#method-i-input_duration","()","<p>This method returns input duration\n"],["input_start","RFF::Processor","RFF/Processor.html#method-i-input_start","()","<p>This method returns start point of the input\n"],["input_type","RFF::Processor","RFF/Processor.html#method-i-input_type","()","<p>This method returns input type detected by FFmpeg\n"],["join_reading_thread","RFF::OutputReader","RFF/OutputReader.html#method-i-join_reading_thread","()","<p>This method can be used to join the reading thread in some place of the\nscript\n"],["kill","RFF::Processor","RFF/Processor.html#method-i-kill","()","<p>This method kills processing thread and sets status to :aborted\n"],["killall","RFF::AudioHandler","RFF/AudioHandler.html#method-i-killall","()","<p>This method kills all the processes in Processor instances and its own\nprocessing thread\n"],["killall","RFF::VideoHandler","RFF/VideoHandler.html#method-i-killall","()","<p>This method kills all the processes in Processor instances and its own\nprocessing thread\n"],["mp3_processor","RFF::AudioHandler","RFF/AudioHandler.html#method-i-mp3_processor","()","<p>This method returns the “to MP3” Processor instance if it exists or nil\notherwise\n"],["mp4_processor","RFF::VideoHandler","RFF/VideoHandler.html#method-i-mp4_processor","()","<p>This method returns the “to MP4” Processor instance if it exists or nil\notherwise\n"],["new","RFF::AudioHandler","RFF/AudioHandler.html#method-c-new","(input, output_path=nil, custom_args=nil, recommended_audio_quality=true, disable_subtitles_decoding=true)","<p>This constructor initializes the class with the following arguments:\n<p><em>input</em> <strong>(required)</strong> - the full path …\n"],["new","RFF::OutputReader","RFF/OutputReader.html#method-c-new","(io)","<p>This constructor initializes the class instance with IO stream and starts\nthe stream reading thread\n<p><em>io</em> …\n\n"],["new","RFF::ProcessingFailure","RFF/ProcessingFailure.html#method-c-new","(exitcode, msg=nil)","<p>Initializes the exception with arguments\n<p><em>exitcode</em> <strong>(required)</strong> - FFmpeg exit code\n<p><em>msg</em> - Message describing …\n"],["new","RFF::Processor","RFF/Processor.html#method-c-new","(input, output_type, output_path=nil, quality=\"5000k\", custom_args=nil, recommended_audio_quality=true, disable_subtitles_decoding=true)","<p>This constructor initializes the class with the following arguments:\n<p><em>input</em> <strong>(required)</strong> - the full path …\n"],["new","RFF::VideoHandler","RFF/VideoHandler.html#method-c-new","(input, output_path=nil, quality=\"5000k\", custom_args=nil, recommended_audio_quality=true, disable_subtitles_decoding=true)","<p>This constructor initializes the class with the following arguments:\n<p><em>input</em> <strong>(required)</strong> - the full path …\n"],["ogg_processor","RFF::AudioHandler","RFF/AudioHandler.html#method-i-ogg_processor","()","<p>This method returns the “to OGG” Processor instance if it exists or nil\notherwise\n"],["ogv_processor","RFF::VideoHandler","RFF/VideoHandler.html#method-i-ogv_processor","()","<p>This method returns the “to OGV” Processor instance if it exists or nil\notherwise\n"],["output_name","RFF::AudioHandler","RFF/AudioHandler.html#method-i-output_name","()","<p>This method returns full output file name\n"],["output_name","RFF::Processor","RFF/Processor.html#method-i-output_name","()","<p>This method returns full output name\n"],["output_name","RFF::VideoHandler","RFF/VideoHandler.html#method-i-output_name","()","<p>This method returns full output file name\n"],["output_path","RFF::AudioHandler","RFF/AudioHandler.html#method-i-output_path","()","<p>This method returns the path in which output file is saved\n"],["output_path","RFF::Processor","RFF/Processor.html#method-i-output_path","()","<p>This method returns path where the output is (being) saved\n"],["output_path","RFF::VideoHandler","RFF/VideoHandler.html#method-i-output_path","()","<p>This method returns the path in which output file is saved\n"],["output_type","RFF::Processor","RFF/Processor.html#method-i-output_type","()","<p>This method returns output type read from the filename\n"],["parser_status","RFF::Processor","RFF/Processor.html#method-i-parser_status","()","<p>This method returns current output parser status\n"],["processing_percentage","RFF::AudioHandler","RFF/AudioHandler.html#method-i-processing_percentage","()","<p>This method returns percentage of process completion\n"],["processing_percentage","RFF::Processor","RFF/Processor.html#method-i-processing_percentage","()","<p>This method returns percentage of process completion\n"],["processing_percentage","RFF::VideoHandler","RFF/VideoHandler.html#method-i-processing_percentage","()","<p>This method returns percentage of process completion\n"],["processing_status","RFF::Processor","RFF/Processor.html#method-i-processing_status","()","<p>This method returns a hash which represents current processing status (eg.\nframes processed, time processed …\n"],["quality","RFF::Processor","RFF/Processor.html#method-i-quality","()","<p>This method returns used video quality\n"],["quality","RFF::VideoHandler","RFF/VideoHandler.html#method-i-quality","()","<p>This method returns used video quality\n"],["raw_command_output","RFF::Processor","RFF/Processor.html#method-i-raw_command_output","()","<p>This method returns raw command output as an array of lines after getting\nrid of unneeded whitespaces …\n"],["status","RFF::Processor","RFF/Processor.html#method-i-status","()","<p>This method returns current processing status (:pending, :processing,\n:completed, :failed, :aborted) …\n"],["to_s","RFF::ProcessingFailure","RFF/ProcessingFailure.html#method-i-to_s","()","<p>Returns message describing the error (exit code and describing message if\nit is present)\n"],["video_input_additional","RFF::Processor","RFF/Processor.html#method-i-video_input_additional","()","<p>This method returns additional information about video input as an array of\nvalues\n"],["video_input_colorspace","RFF::Processor","RFF/Processor.html#method-i-video_input_colorspace","()","<p>This method returns color space of video input\n"],["video_input_format","RFF::Processor","RFF/Processor.html#method-i-video_input_format","()","<p>This method returns format of video input\n"],["video_input_metadata","RFF::Processor","RFF/Processor.html#method-i-video_input_metadata","()","<p>This method returns metadata for video input stream as a hash with keys\nbeing symbols representing each …\n"],["video_input_resolution","RFF::Processor","RFF/Processor.html#method-i-video_input_resolution","()","<p>This method returns resolution of video input\n"],["video_output_additional","RFF::Processor","RFF/Processor.html#method-i-video_output_additional","()","<p>This method returns additional information about video output as an array\nof values\n"],["video_output_colorspace","RFF::Processor","RFF/Processor.html#method-i-video_output_colorspace","()","<p>This method returns color space of video output\n"],["video_output_format","RFF::Processor","RFF/Processor.html#method-i-video_output_format","()","<p>This method returns format of video output\n"],["video_output_metadata","RFF::Processor","RFF/Processor.html#method-i-video_output_metadata","()","<p>This method returns metadata for video output stream as a hash with keys\nbeing symbols representing each …\n"],["video_output_resolution","RFF::Processor","RFF/Processor.html#method-i-video_output_resolution","()","<p>This method returns resolution of video output\n"],["video_stream_mapping","RFF::Processor","RFF/Processor.html#method-i-video_stream_mapping","()","<p>This method returns video stream mapping information (input_format -&gt;\noutput_format)\n"],["wav_processor","RFF::AudioHandler","RFF/AudioHandler.html#method-i-wav_processor","()","<p>This method returns the “to WAV” Processor instance if it exists or nil\notherwise\n"],["webm_processor","RFF::VideoHandler","RFF/VideoHandler.html#method-i-webm_processor","()","<p>This method returns the “to WEBM” Processor instance if it exists or nil\notherwise\n"],["README","","README_rdoc.html","","<p>rff - A Ruby gem for simple audio and video conversion for HTML5 using FFmpeg\n<p>Introduction\n<p>Are you tired …\n"]]}}